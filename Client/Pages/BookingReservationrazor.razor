@page "/BookingReservation"
@using HotelFinal.Shared;
@using HotelFinal.Client.Services
@using Syncfusion.Blazor.Calendars
@using HotelFinal.Client.Components
@inject HotelService hotelService
@inject UserService userService
@inject NavigationManager navManager;
<h3>Find A Room</h3>

<AuthorizeView>
    <Authorized>

    </Authorized>
</AuthorizeView>

<div class="row mb-2">
    <div class="col-11 my-auto">
        <SfDateRangePicker TValue="DateTime?"
            Placeholder="How Long Are You Staying?"
            ShowClearButton="true"
            @bind-StartDate=Checkin
            @bind-EndDate=Checkout />
    </div>
    <div class="col-1 btn btn-primary my-auto" @onclick=GetAvailableRoomTypes>
        <i class="bi bi-search"></i>
    </div>
</div>
@if (RoomTypes is not null)
{
    <div class="row" >
        @foreach (var type in RoomTypes)
        {
            <div class="col-3" @onclick="() => ReserveRoom(type)">
                <RoomTypeCard RoomType=type></RoomTypeCard>
            </div>
        }
    </div>
}


@code {
    public DateTime? Checkin { get; set; }
    public DateTime? Checkout { get; set; }
    public List<RoomType> RoomTypes { get; set; }

    public async Task GetAvailableRoomTypes()
    {
        RoomTypes = await hotelService.GetAvailableRoomTypesAsync(Checkin.Value, Checkout.Value);
    }

    public async Task ReserveRoom(RoomType roomType)
    {
        var userId = await userService.GetUserId();
        var userEmail = await userService.GetUserEmail();
        Guest guest;

        try
        {
            guest = await hotelService.GetGuestAsync(userId, userEmail);
        }
        catch
        {
            guest = new()
                {
                    FirstName = userId,
                    LastName = userEmail
                };

            await hotelService.PostGuestAsync(guest);
            guest = await hotelService.GetGuestAsync(userId, userEmail);
        }


        Reservation reservation = new()
            {
                GuestId = guest.Id,
                ExpectedCheckin = DateOnly.FromDateTime(Checkin.Value),
                ExpectedCheckout = DateOnly.FromDateTime(Checkout.Value),
            };

        List<RoomType> roomTypes = new();
        roomTypes.Add(roomType);

        ReservationPostObject rpo = new()
            {
                Reservation = reservation,
                RoomTypes = roomTypes
            };

        await hotelService.PostReservationsAsync(rpo);

        ReservationConfirmationObject rco = new()
        {
            UserEmail = userEmail,
            Checkin = Checkin.Value.ToString("yyyy-MM-dd"),
            Checkout = Checkout.Value.ToString("yyyy-MM-dd")
        };

        await hotelService.SendReservationConfirmation(rco);

        navManager.NavigateTo("/ReservationConfirmation");
    }
}
